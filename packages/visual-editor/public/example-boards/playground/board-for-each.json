{
  "title": "Board for each",
  "version": "0.1.0",
  "edges": [
    {
      "from": "Accummulate",
      "to": "Accummulate",
      "out": "array",
      "in": "array"
    },
    {
      "from": "Accummulate",
      "to": "Emitter",
      "out": "array",
      "in": "b"
    },
    {
      "from": "Board Output",
      "to": "Accummulate",
      "out": "object",
      "in": "item"
    },
    {
      "from": "Emitter",
      "to": "output-0",
      "out": "emit",
      "in": "outputs"
    },
    {
      "from": "input-0",
      "to": "passthrough-0",
      "out": "board",
      "in": "board"
    },
    {
      "from": "input-0",
      "to": "Pop",
      "out": "array",
      "in": "array"
    },
    {
      "from": "passthrough-0",
      "to": "Board Output",
      "out": "board",
      "in": "$board"
    },
    {
      "from": "passthrough-0",
      "to": "Board Output",
      "out": "item",
      "in": "object"
    },
    {
      "from": "passthrough-0",
      "to": "passthrough-0",
      "out": "board",
      "in": "board"
    },
    {
      "from": "passthrough-0",
      "to": "Pop",
      "out": "array",
      "in": "array"
    },
    {
      "from": "Pop",
      "to": "Emitter",
      "out": "array",
      "in": "a"
    },
    {
      "from": "Pop",
      "to": "passthrough-0",
      "out": "array",
      "in": "array"
    },
    {
      "from": "Pop",
      "to": "passthrough-0",
      "out": "item",
      "in": "item"
    }
  ],
  "nodes": [
    {
      "id": "input-0",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "array": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ],
              "title": "array input",
              "default": "[\n  \"What\",\n  \"did\",\n  \"the\",\n  \"fox\",\n  \"say!\"\n]"
            },
            "board": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ],
              "title": "board json",
              "default": "{\n  \"edges\": [\n    {\n      \"from\": \"fn-4\",\n      \"to\": \"output-5\",\n      \"out\": \"*\",\n      \"in\": \"\"\n    },\n    {\n      \"from\": \"input-3\",\n      \"to\": \"fn-4\",\n      \"out\": \"object\",\n      \"in\": \"object\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"id\": \"output-5\",\n      \"type\": \"output\",\n      \"configuration\": {},\n      \"metadata\": {\n        \"title\": \"Output\"\n      }\n    },\n    {\n      \"id\": \"fn-4\",\n      \"type\": \"runJavascript\",\n      \"configuration\": {\n        \"code\": \"const fn_4 = inputs=>{const{object}=inputs;return{object:object.split(\\\"\\\").map(c=>c===c.toUpperCase()?c.toLowerCase():c.toUpperCase()).join(\\\"\\\")}};\",\n        \"name\": \"fn_4\",\n        \"raw\": true\n      }\n    },\n    {\n      \"id\": \"input-3\",\n      \"type\": \"input\",\n      \"configuration\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"object\": {\n              \"type\": \"string\",\n              \"title\": \"object\"\n            }\n          },\n          \"required\": [\n            \"object\"\n          ]\n        }\n      },\n      \"metadata\": {\n        \"title\": \"Input\"\n      }\n    }\n  ],\n  \"graphs\": {}\n}"
            }
          },
          "required": []
        }
      }
    },
    {
      "id": "output-0",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "outputs": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          },
          "required": [
            "outputs"
          ]
        }
      }
    },
    {
      "id": "Accummulate",
      "type": "runJavascript",
      "configuration": {
        "array": [],
        "code": "const Accummulate = ({item,array})=>{return{array:[...array,item]}};",
        "inputSchema": {
          "type": "object",
          "properties": {
            "item": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "array": {
              "anyOf": [
                {
                  "type": [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string"
                  ]
                },
                {
                  "type": [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string"
                  ]
                }
              ]
            }
          }
        },
        "name": "Accummulate",
        "outputSchema": {
          "type": "object",
          "properties": {
            "array": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          }
        },
        "raw": true
      }
    },
    {
      "id": "Board Output",
      "type": "invoke",
      "configuration": {}
    },
    {
      "id": "Emitter",
      "type": "runJavascript",
      "configuration": {
        "code": "const Emitter = ({a,b})=>{let emit=void 0;if(!a||a.length===0){emit=b}return{emit}};",
        "inputSchema": {
          "type": "object",
          "properties": {
            "a": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "b": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          }
        },
        "name": "Emitter",
        "outputSchema": {
          "type": "object",
          "properties": {
            "emit": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "a": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "b": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          }
        },
        "raw": true
      }
    },
    {
      "id": "passthrough-0",
      "type": "passthrough",
      "configuration": {}
    },
    {
      "id": "Pop",
      "type": "runJavascript",
      "configuration": {
        "code": "const Pop = ({array})=>{const[item,...rest]=array;if(item){return{array:rest,item}}return{}};",
        "inputSchema": {
          "type": "object",
          "properties": {
            "array": {
              "anyOf": [
                {
                  "type": [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string"
                  ]
                },
                {
                  "type": [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string"
                  ]
                }
              ]
            }
          }
        },
        "name": "Pop",
        "outputSchema": {
          "type": "object",
          "properties": {
            "array": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "item": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          }
        },
        "raw": true
      }
    }
  ]
}